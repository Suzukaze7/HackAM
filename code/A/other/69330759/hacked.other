import java.util.*

fun main() {
    val scanner = Scanner(System.`in`)
    val (n, m) = scanner.nextLine().split(" ").map { it.toInt() }

    fun toId(i: Int, j: Int) = i * m + j

    val a = Array(n) { scanner.nextLine() }
    require(a.size == n) { "Input rows mismatch" }
    for (i in a.indices) {
        require(a[i].length == m) { "Input columns mismatch" }
        if (i == 0 || i == n - 1) require(a[i].all { it == '#' }) { "Boundary should be all #" }
        else require(a[i].first() == '#' && a[i].last() == '#') { "Side boundaries should be #" }
    }

    var s = -1
    var t = -1
    val nxt = Array(n * m) { IntArray(4) { -1 } }
    for (i in 0 until n) {
        for (j in 0 until m) {
            if (a[i][j] == '#') continue
            val u = toId(i, j)
            if (a[i][j] == 'S') s = u
            if (a[i][j] == 'T') t = u
            for (k in 0 until 4)
                nxt[u][k] = u
            if (i > 0 && a[i - 1][j] != '#')
                nxt[u][3] = nxt[toId(i - 1, j)][3]
            if (j > 0 && a[i][j - 1] != '#')
                nxt[u][2] = nxt[toId(i, j - 1)][2]
        }
    }
    for (i in n - 1 downTo 0) {
        for (j in m - 1 downTo 0) {
            if (a[i][j] == '#') continue
            val u = toId(i, j)
            if (i < n - 1 && a[i + 1][j] != '#')
                nxt[u][1] = nxt[toId(i + 1, j)][1]
            if (j < m - 1 && a[i][j + 1] != '#')
                nxt[u][0] = nxt[toId(i, j + 1)][0]
        }
    }
    require(s != -1 && t != -1) { "Start or target not set" }
    val d = IntArray(n * m) { Int.MAX_VALUE }
    d[s] = 0
    val q = LinkedList<Int>()
    q.add(s)
    
    while (q.isNotEmpty()) {
        
        val u = q.poll()
        if (u == t) {
            println(d[u])
            return
        }
        for (j in 0..3) {
            val v = nxt[u][j]
            if (v != -1 && d[v] > d[u] + 1) {
                d[v] = d[u] + 1
                q.add(v)
            }
        }
    }
    println(-1)
}